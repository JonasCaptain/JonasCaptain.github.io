---
import BaseHead from "./BaseHead.astro";
import NavListItem from "@components/NavListItem.astro";
import pageSize from "src/config.js";
import config from "src/config.js";
export interface Props {
  title: string;
  description?: string;
  activeLink?: string;
}

const {
  title,
  description = "My blog",
  activeLink = null,
} = Astro.props as Props;
const { navLinks } = pageSize;
const {
  metaData: { authorName },
} = config;
---

<html lang="zh-CN">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <a
      href="#main"
      class="absolute bg-info text-info-content px-6 py-2 rounded-br-md translate-x-[-100%] focus-within:translate-x-0 transition-all"
      >Skip navigation</a
    >
    <header class="container mx-auto flex items-center justify-between mb-16">
      <div class="p-4">
        <!-- Logo -->
        <img src="/images/93767616.jpg" alt="" style="width: 100px; height: 100px; border-radius: 50%;">
      </div>

      <label
        aria-label="Hamburger Menu"
        id="nav-toggle"
        class="btn btn-circle swap swap-rotate fixed z-[999] top-4 right-4 hidden"
        aria-controls="primary-nav"
        aria-expanded="false"
      >
        <input type="checkbox" />
        <!-- hamburger icon -->
        <svg
          class="swap-off fill-current"
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 512 512"
        >
          <path
            d="M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z"
          ></path>
        </svg>
        <!-- close icon -->
        <svg
          class="swap-on fill-current"
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 512 512"
        >
          <polygon
            points="400 145.49 366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49"
          ></polygon>
        </svg>
      </label>

      <nav class="mr-6">
        <ul
          id="primary-nav"
          class="flex grow gap-8 items-center justify-center z-[100]"
          data-visible="false"
        >
          {
            navLinks.map((ele) => (
              <NavListItem
                navLink={ele.link}
                activeLink={activeLink}
                icon={ele.icon}
              />
            ))
          }
          <li>
            <!-- Theme, Light/Dark mode -->
            <label id="themeSetting" class="swap swap-rotate">
              <!-- this hidden checkbox controls the state -->
              <input type="checkbox" />
              <!-- sun icon -->
              <svg
                data-set-theme="cmyk"
                data-act-class="ACTIVECLASS"
                class="swap-on fill-current w-6 h-6"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
              >
                <path
                  d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"
                ></path>
              </svg>
              <!-- moon icon -->
              <svg
                data-set-theme="night"
                data-act-class="ACTIVECLASS"
                class="swap-off fill-current w-6 h-6"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
              >
                <path
                  d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"
                ></path>
              </svg>
            </label>
          </li>
        </ul>
      </nav>
    </header>
    <main id="main" class="container mx-auto">
      <slot />
    </main>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      id="scrollButton"
      viewBox="0 0 512 512"
      class="w-10 h-10 fill-primary fixed bottom-5 right-5 animate-[jump_1500ms_infinite] cursor-pointer bg-base-100 rounded-full"
      style="display: none"
    >
      <path
        d="M256 0C114.6 0 0 114.6 0 256c0 141.4 114.6 256 256 256s256-114.6 256-256C512 114.6 397.4 0 256 0zM382.6 254.6c-12.5 12.5-32.75 12.5-45.25 0L288 205.3V384c0 17.69-14.33 32-32 32s-32-14.31-32-32V205.3L174.6 254.6c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l103.1-103.1C241.3 97.4 251.1 96 256 96c4.881 0 14.65 1.391 22.65 9.398l103.1 103.1C395.1 221.9 395.1 242.1 382.6 254.6z"
      ></path>
    </svg>

    <footer class="border-t px-4 py-6 mt-6">
      <p class="text-center text-sm">
        &copy; {new Date().getFullYear()}
        {authorName}
      </p>
      <p class="text-center text-xs">
        Built with <a
          class="text-cyan-600 hover:text-black dark:hover:text-white"
          href="https://astro.build"
          target="_blank"
          rel="noreferrer noopener"
          >{Astro.generator}
        </a>
      </p>
    </footer>
  </body>
</html>

<style>
  html {
    --svg-totalLength: 844;
  }

  html[data-theme="night"] {
    --fill-color: 142 72% 29%;
    --stroke-color: 217 33% 17%;
    --hamburger-bg: 0 0% 30%;
    color-scheme: dark;
  }

  html[data-theme="cmyk"] {
    --fill-color: 173 80% 40%;
    --stroke-color: 213 27% 84%;
    --hamburger-bg: 0 0% 70%;
    color-scheme: light;
  }

  /* Mobile Navigation */
  @media (max-width: 640px) {
    ul#primary-nav {
      position: fixed;
      inset: 0 0 0 30%;
      flex-direction: column;
      padding: min(30vh, 10rem) 2em;
      transform: translateX(100%);
      transition: transform 500ms ease-in-out;
      background: hsl(var(--hamburger-bg) / 0.5);
      backdrop-filter: blur(2rem);
    }

    ul#primary-nav[data-visible="true"] {
      transform: translateX(0);
    }

    label#nav-toggle {
      display: grid;
    }
  }

  /* Logo & Theme SVG color */
  header path {
    fill: hsl(var(--fill-color));
  }
  header polygon {
    fill: hsl(var(--er));
  }

  /* Logo Animation */
  header > div > svg > path {
    stroke-dasharray: var(--svg-totalLength);
    stroke-dashoffset: var(--svg-totalLength);
    animation: logoAnimation 5s forwards ease-in-out;
    paint-order: stroke;
  }

  @keyframes logoAnimation {
    from {
      fill: hsl(var(--fill-color) / 0.1);
      stroke: hsl(var(--stroke-color));
    }

    to {
      stroke-dashoffset: 0;
      fill: hsl(var(--fill-color));
      stroke: hsl(var(--stroke-color) / 0);
    }
  }
</style>
<style is:global>
  ::selection {
    background-color: hsl(var(--a));
    color: hsl(var(--ac));
  }

  /* Scrollbar */
  ::-webkit-scrollbar {
    width: auto;
  }

  ::-webkit-scrollbar-track {
    background-color: hsl(var(--b3));
    border-radius: 100vmax;
    margin: 0.25rem;
  }

  ::-webkit-scrollbar-thumb {
    background-color: hsl(var(--bc));
    border-radius: 100vmax;
  }

  ::-webkit-scrollbar-thumb:hover {
    background-color: hsl(var(--bc) / 0.7);
    border-radius: 100vmax;
  }

  @supports (scrollbar-color: black white) {
    * {
      scrollbar-color: hsl(var(--bc)) hsl(var(--b3));
    }
  }
</style>
<script>
  // Navigation / Hamburger menu - control
  const nav = document.querySelector<HTMLUListElement>("#primary-nav");
  const navToggle = document.querySelector<HTMLLabelElement>("#nav-toggle");
  const navToggleInput =
    document.querySelector<HTMLInputElement>("#nav-toggle input");

  navToggle.addEventListener("change", () => {
    if (nav.getAttribute("data-visible") === "false") {
      nav.setAttribute("data-visible", "true");
      nav.setAttribute("aria-expanded", "true");
    } else if (nav.getAttribute("data-visible") === "true") {
      nav.setAttribute("data-visible", "false");
      nav.setAttribute("aria-expanded", "false");
    }
  });

  document.querySelector("main").addEventListener("click", () => {
    if (nav.getAttribute("data-visible") === "true") {
      nav.setAttribute("data-visible", "false");
      nav.setAttribute("aria-expanded", "false");
      navToggleInput.checked = !navToggleInput.checked;
    }
  });

  // Scroll To Top button - control
  const scrollButton = document.querySelector<SVGElement>("#scrollButton");
  scrollButton.addEventListener("click", () => {
    window.scroll({
      top: 0,
      left: 0,
      behavior: "smooth",
    });
  });
  window.addEventListener("scroll", () => {
    if (document.documentElement.scrollTop > window.innerHeight / 4) {
      scrollButton.style.display = "block";
    } else {
      scrollButton.style.display = "none";
    }
  });

  // Theme stuff
  import { themeChange } from "theme-change";
  themeChange();
  if (
    localStorage["theme"] === "cmyk" ||
    document.querySelector("html").getAttribute("data-theme") === "cmyk"
  ) {
    document.querySelector<HTMLInputElement>("#themeSetting > input").checked =
      true;
  }
</script>
